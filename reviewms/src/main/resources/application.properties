company-service.url=http://localhost:8081
job-service.url=http://localhost:8082
review-service.url=http://localhost:8083

spring.application.name=reviewms
server.port=8083

# Eureka
# url where all microservices will be registered
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

logging.pattern.console=%C{1.} [%-5level] %d{HH:mm:ss} - %msg%n

# for each instance to have unique id
eureka.instance.instance-id=${spring.application.name}:${random.uuid}

# H2 Database
#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:test
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update

# PostgreSQL
#spring.h2.console.enabled=true
spring.datasource.url=jdbc:postgresql://localhost:5432/jobapp
spring.datasource.username=seyan99
spring.datasource.password=admin1112
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Zipkin
# in production reduce sampling rate to ~0.6, 1.0 trace every request
management.tracing.sampling.probability=1.0

# Config Server
spring.config.import=optional:config-server:http://localhost:8080
spring.profiles.active=dev

# Actuator
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.info.env.enabled=true
management.endpoint.shutdown.enabled=true
server.shutdown=graceful

# RabbitMQ
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

info.app.name=JobApp
info.app.description=My implementation of microservices YouTube guide by EmbarkX
info.app.version=1.0.0